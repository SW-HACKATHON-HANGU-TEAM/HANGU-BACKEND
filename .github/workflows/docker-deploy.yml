name: CI/CD with Gradle, Docker, Slack

on: [push]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      working-directory: ./
      APPLICATION: ${{ secrets.APPLICATION }}
      APPLICATION_TEST: ${{ secrets.APPLICATION_TEST }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - uses: actions/checkout@v3
      - run: mkdir -p ./src/main/resources && touch ./src/main/resources/application.yml
      - run: touch ./src/test/resources/application-test.yml
      - run: echo "${{env.APPLICATION}}" > ./src/main/resources/application.yml
      - run: echo "${{env.APPLICATION_TEST}}" > ./src/test/resources/application-test.yml

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        working-directory: ${{ env.working-directory }}

#      - name: Test with Gradle
#        run: ./gradlew test --no-daemon
#        working-directory: ${{ env.working-directory }}

#      - name: Create Rest Docs
#        run: ./gradlew bootJar -x test
#        working-directory: ${{ env.working-directory }}

#      - name: Create Jacoco Test Report
#        run: ./gradlew jacocoTestReport

      - name: Build with Gradle
        run: ./gradlew build -x test --parallel --no-daemon
        working-directory: ${{ env.working-directory }}

      - name: Cleanup Gradle Cache
        if: ${{ always() }}
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

      - name: run ls build libs
        run: ls ./build/libs
      - name: run ls build
        run: ls ./build

      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.PROJECT_NAME }} .
          docker tag ${{ secrets.PROJECT_NAME }} ${{ secrets.DOCKER_HUB_REPO }}:${GITHUB_SHA::7}
          docker push ${{ secrets.DOCKER_HUB_REPO }}:${GITHUB_SHA::7}

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_SERVER_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            docker rmi $(docker images -q)
            docker pull ${{ secrets.DOCKER_HUB_REPO }}:${GITHUB_SHA::7}
            docker tag ${{ secrets.DOCKER_HUB_REPO }}:${GITHUB_SHA::7} ${{ secrets.PROJECT_NAME }}
            docker rm -f ${{ secrets.PROJECT_NAME }}
            docker run -d --name ${{ secrets.PROJECT_NAME }} -p 80:8080 --net azureuser_our_net  ${{ secrets.PROJECT_NAME }}:latest



